$hd: map-get($breakpoints, hd);
$xxl: map-get($breakpoints, xxl);
$ml: map-get($breakpoints, ml);
$xl: map-get($breakpoints, xl);
$lg: map-get($breakpoints, lg);
$md: map-get($breakpoints, md);
$mds: map-get($breakpoints, mds);
$sm: map-get($breakpoints, sm);
$xs: map-get($breakpoints, xs);
$vxs: map-get($breakpoints, vxs);

@mixin background-content($repeat: no-repeat, $size: cover, $position: center center) {
	background-repeat: $repeat;
	background-size: $size;
	background-position: $position;
}

@mixin overlay($opacity: $opacity, $z-index: 0) {
	position: absolute;
	top: 0;
	left: 0;
	height: 100%;
	width: 100%;
	opacity: $opacity;
	z-index: $z-index;
}

@mixin equal-size($width, $height: $width) {
	width: $width;
	height: $height;
}

@mixin height-lh($height, $lineheight: $height) {
	height: $height;
	line-height: $lineheight;
}

@mixin equal-size-lineHeight($width, $height: $width, $Lheight: $width) {
	width: $width;
	height: $height;
	line-height: $Lheight;
}

@mixin flex-position($display, $contet, $items) {
	display: $display;
	justify-content: $contet;
	align-items: $items;
}

@mixin center-position($top: $top, $left: $top) {
	position: absolute;
	top: $top;
	left: $top;
	transform: translate(-#{$top}, -#{$top});
}

@mixin inputPlaceholder() {
	$selector: '';
	$prefixes: (moz: "::-moz",
			webkit: "::-webkit",
			ie: ":-ms"
		);

	@each $prop,
	$value in $prefixes {
		@if $prop !="moz" {
			$selector: #{$value}-input-placeholder;
		}

		@else {
			$selector: #{$value}-placeholder;
		}

		@if & {
			&#{$selector} {
				@content;
			}
		}

		@else {
			#{$selector} {
				@content;
			}
		}
	}

	&::placeholder {
		@content;
	}
}



// Mixin to place items on a circle
@mixin on-circle($item-count, $circle-size, $item-size, $rotCount: 0, $angleCount: 360) {
	

	>* {
		display: block;
		position: absolute;
		top: 50%;
		left: 50%;
		width: $item-size;
		height: $item-size;
		line-height: $item-size;
		margin: -($item-size * 0.5);

		$angle: #{$angleCount / $item-count};
		$rot: $rotCount;

		@for $i from 1 through $item-count {
			&:nth-of-type(#{$i}) {
				transform:
					rotate($rot * 1deg) 
					translate($circle-size * 0.5) 
					rotate($rot * -1deg);
			}

			$rot: $rot+$angle;
		}
	}
}



@mixin transition-delay($itemcount: 1, $transitionCount: 0.0s) {
	$transition: $transitionCount;

	@for $i from 1 through $itemcount {
		&:nth-of-type(#{$i}) {
			transition-delay: ($transition + $transitionCount);
		}
		$transition: $transition+0.1s;
	}
}

// Responsive Query
@mixin hd {

	/* Hight Resoulation devices */
	@media (min-width: #{$xxl + 1}) {
		@content;
	}
}

@mixin xxl {
	
	/* Extra large devices */
	@media (min-width: #{$xl + 1}) {
		@content;
	}
}

@mixin xl {

	/* Medium Large devices */
	@media (min-width: #{$ml+1}) {
		@content;
	}
}

@mixin ml {

	/* Medium Large devices */
	@media (min-width: #{$lg+1}) {
		@content;
	}
}

@mixin lg {

	/* Large devices */
	@media (min-width: #{$md+1}) {
		@content;
	}
}

@mixin md {
	/* Medium devices */
	@media (min-width: #{$mds+1}) {
		@content;
	}
}
@mixin mds {
	/* Medium devices */
	@media (min-width: #{$sm+1}) {
		@content;
	}
}

@mixin sm {

	/* Small devices */
	@media (min-width: #{$xs+1}) {
		@content;
	}
}

@mixin xs {

	/* Extra small devices */
	@media (min-width: #{$vxs+1}) {
		@content;
	}
}

@mixin vxs {
	/* Extra small devices */
	@media (min-width: #{$vxs}) {
		@content;
	}
}

// Responsive Query
@mixin hd-max {

	/* Hight Resoulation devices */
	@media (min-width: #{$xxl + 2}) {
		@content;
	}
}

@mixin xxl-max {

	/* Extra large devices */
	@media (max-width: #{$xxl + 1}) {
		@content;
	}
}

@mixin xl-max {

	/* Medium Large devices */
	@media (max-width: #{$xl+1}) {
		@content;
	}
}

@mixin ml-max {

	/* Medium Large devices */
	@media (max-width: #{$ml+1}) {
		@content;
	}
}

@mixin lg-max {

	/* Large devices */
	@media (max-width: #{$lg+1}) {
		@content;
	}
}

@mixin md-max {

	/* Medium devices */
	@media (max-width: #{$md+1}) {
		@content;
	}
}
@mixin mds-max {
	/* Medium devices */
	@media (max-width: #{$mds+1}) {
		@content;
	}
}

@mixin sm-max {

	/* Small devices */
	@media (max-width: #{$sm+1}) {
		@content;
	}
}

@mixin xs-max {

	/* Extra small devices */
	@media (max-width: #{$xs+1}) {
		@content;
	}
}

@mixin vxs-max {
	/* Extra small devices */
	@media (max-width: #{$vxs + 1}) {
		@content;
	}
}

@mixin respond-to-min($size) {
	@if $size == "hd" {
		@include hd {
			@content;
		}
	} @else if $size == "xxl" {
		@include xxl {
			@content;
		}
	} @else if $size == "xl" {
		@include xl {
			@content;
		}
	} @else if $size == "ml" {
		@include ml {
			@content;
		}
	} @else if $size == "lg" {
		@include lg {
			@content;
		}
	} @else if $size == "md" {
		@include md {
			@content;
		}
	}@else if $size == "mds" {
		@include mds {
			@content;
		}
	} @else if $size == "sm" {
		@include sm {
			@content;
		}
	} @else if $size == "xs" {
		@include xs {
			@content;
		}
	} @else if $size == "vxs" {
		@include vxs {
			@content;
		}
	} @else {
		@warn "Mixin '#{$size}' does not exist.";
	}
}
@mixin respond-to($size) {
	@if $size == "hd" {
		@include hd-max {
			@content;
		}
	} @else if $size == "xxl" {
		@include xxl-max {
			@content;
		}
	} @else if $size == "xl" {
		@include xl-max {
			@content;
		}
	} @else if $size == "ml" {
		@include ml-max {
			@content;
		}
	} @else if $size == "lg" {
		@include lg-max {
			@content;
		}
	} @else if $size == "md" {
		@include md-max {
			@content;
		}
	}@else if $size == "mds" {
		@include mds-max {
			@content;
		}
	} @else if $size == "sm" {
		@include sm-max {
			@content;
		}
	} @else if $size == "xs" {
		@include xs-max {
			@content;
		}
	} @else if $size == "vxs" {
		@include vxs-max {
			@content;
		}
	} @else {
		@warn "Mixin '#{$size}' does not exist.";
	}
}

@mixin color-mix-support($amount){
	@media not all and (min-resolution:.001dpcm) {
		filter: brightness($amount);
	}
}

@mixin darken-color($color-variable, $amount: 20%) {
	// Use color-mix for modern browsers
	color: color-mix(in srgb, var(#{$color-variable}) calc(100% - #{$amount}), black);
	@include color-mix-support(calc(100% - #{$amount}));
}

@mixin lighten-color($color-variable, $amount: 20%) {
	// Use color-mix for modern browsers
	color: color-mix(in srgb, var(#{$color-variable}) calc(100% - #{$amount}), white);
	@include color-mix-support(calc(100% - #{$amount}));
}


@mixin background-opacity($color, $opacity) {
	background-color: rgba(red($color), green($color), blue($color), $opacity);
}
